name: BSN Frontend Pipeline

on:
  push:
    branches:
      - CI/CD-Pipeline-&-Deployment
    paths:
      - book-network-ui/**
      - docker/frontend/**
      - 'docker-compose.yml'
      - .github/workflows/*-frontend.yml
jobs:
  build-image:
    name: Build FE Docker image
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract project version
        id: extract_version
        run: |
          cd book-network-ui
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network-ui
          file: docker/frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/bsn-ui:latest,${{ secrets.DOCKER_USERNAME }}/bsn-ui:${{ steps.extract_version.outputs.VERSION }}

  deploy:
    name: Deploy Frontend
    runs-on: self-hosted
    needs: [ build-image ]
    steps:
      - name: Set up SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set ENV variable and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          cd ci-cd
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          docker compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d --remove-orphans
          EOF